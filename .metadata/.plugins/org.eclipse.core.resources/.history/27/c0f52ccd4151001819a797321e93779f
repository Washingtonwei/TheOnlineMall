package com.taotao.sso.service;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.JsonUtils;
import com.taotao.mapper.TbUserMapper;
import com.taotao.pojo.TbUser;
import com.taotao.pojo.TbUserExample;
import com.taotao.pojo.TbUserExample.Criteria;
import com.taotao.sso.dao.JedisClient;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private TbUserMapper tbUserMapper;

	@Autowired
	private JedisClient jedisClient;

	@Value("${REDIS_USER_SESSION_KEY}")
	private String REDIS_USER_SESSION_KEY;

	@Value("${SSO_SESSION_EXPIRE}")
	private Integer SSO_SESSION_EXPIRE;

	@Override
	public TaotaoResult checkData(String content, Integer type) {
		TbUserExample example = new TbUserExample();
		Criteria criteria = example.createCriteria();
		if (1 == type) {
			// SELETCT * from tb_user where username = 'zhangsan1'
			criteria.andUsernameEqualTo(content);
		} else if (2 == type) {
			// SELETCT * from tb_user where phone = '13065895214'
			criteria.andPhoneEqualTo(content);
		} else if (3 == type) {
			// SELETCT * from tb_user where email = 'wei@tcu.edu'
			criteria.andEmailEqualTo(content);
		} else {

		}
		List<TbUser> list = tbUserMapper.selectByExample(example);
		if (list == null || list.size() == 0) {// pass the check data
			return TaotaoResult.ok(true);
		}

		return TaotaoResult.ok(false);
	}

	@Override
	public TaotaoResult createUser(TbUser user) {
		user.setUpdated(new Date());
		user.setCreated(new Date());
		// MD5 encryption
		try {
			user.setPassword(DigestUtils.md5DigestAsHex(user.getPassword().getBytes()));
		} catch (Exception e) {
			e.printStackTrace();
		}

		tbUserMapper.insert(user);
		return TaotaoResult.ok();
	}

	@Override
	public TaotaoResult userLogin(String username, String password) {
		// select based on username
		TbUserExample example = new TbUserExample();
		Criteria criteria = example.createCriteria();
		criteria.andUsernameEqualTo(username);
		List<TbUser> list = tbUserMapper.selectByExample(example);
		if (list == null || list.size() == 0) {// username doesn't exist
			return TaotaoResult.build(400, "Username or password wrong");
		}
		TbUser user = list.get(0);
		// compare password
		if (!DigestUtils.md5DigestAsHex(password.getBytes()).equals(user.getPassword())) {
			return TaotaoResult.build(400, "Username or password wrong");
		}

		// generate a token for valid user log on
		String token = UUID.randomUUID().toString();

		// Don't want to save password into redis
		user.setPassword(null);

		// write to Redis
		jedisClient.set(REDIS_USER_SESSION_KEY + ":" + token, JsonUtils.objectToJson(user));

		// Set expire time
		jedisClient.expire(REDIS_USER_SESSION_KEY + ":" + token, SSO_SESSION_EXPIRE);

		// return token
		return TaotaoResult.ok(token);

	}

	@Override
	public TaotaoResult getUserByToken(String token) {
		String json = jedisClient.get(REDIS_USER_SESSION_KEY + ":" + token);
		if (StringUtils.isBlank(json)) {
			return TaotaoResult.build(400, "Session Expired");
		}
		return null;
	}

}
